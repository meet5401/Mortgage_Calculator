{"ast":null,"code":"export default function calculatePayments(initial, years, rate, monthlyOverpayment) {\n  var overpayments = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n  var monthlyRatePct = rate / 1200;\n  var monthlyPayment = monthlyRatePct === 0 ? initial / years / 12 : initial * monthlyRatePct / (1 - Math.pow(1 / (1 + monthlyRatePct), years * 12));\n  var balance = initial;\n  var baseline = initial;\n  var payments = [{\n    overpayment: 0,\n    balance: balance,\n    baseline: baseline\n  }];\n  var partial;\n\n  var _loop = function _loop(year) {\n    var interestYearly = 0;\n    var overpaymentYearly = 0;\n\n    var _loop2 = function _loop2(month) {\n      var overpayment = overpayments.filter(function (x) {\n        return +x.year === year && +x.month === month;\n      }).reduce(function (acc, val) {\n        return acc + +val.amount;\n      }, 0);\n      var interestMonth = balance * monthlyRatePct;\n      interestYearly += interestMonth;\n      overpaymentYearly += overpayment;\n      balance -= monthlyPayment + monthlyOverpayment + overpayment - interestMonth;\n      baseline -= monthlyPayment - baseline * monthlyRatePct;\n\n      if (balance <= 0) {\n        balance = 0;\n\n        if (partial === undefined && month !== 12) {\n          partial = month;\n        }\n      }\n    };\n\n    for (var month = 1; month <= 12; month++) {\n      _loop2(month);\n    }\n\n    payments.push({\n      baseline: baseline,\n      interestYearly: interestYearly,\n      balance: balance,\n      partial: partial,\n      overpayment: overpaymentYearly + +monthlyOverpayment * (partial || 12)\n    });\n    if (partial) partial = 0;\n  };\n\n  for (var year = 0; year < years; year++) {\n    _loop(year);\n  }\n\n  return {\n    monthlyPayment: monthlyPayment,\n    payments: payments\n  };\n}","map":{"version":3,"sources":["C:/Users/pravi/OneDrive/Desktop/mortgage/src/calculations.js"],"names":["calculatePayments","initial","years","rate","monthlyOverpayment","overpayments","monthlyRatePct","monthlyPayment","Math","pow","balance","baseline","payments","overpayment","partial","year","interestYearly","overpaymentYearly","month","filter","x","reduce","acc","val","amount","interestMonth","undefined","push"],"mappings":"AAAA,eAAe,SAASA,iBAAT,CACbC,OADa,EAEbC,KAFa,EAGbC,IAHa,EAIbC,kBAJa,EAMb;AAAA,MADAC,YACA,uEADe,EACf;AACA,MAAMC,cAAc,GAAGH,IAAI,GAAG,IAA9B;AACA,MAAMI,cAAc,GAClBD,cAAc,KAAK,CAAnB,GACIL,OAAO,GAAGC,KAAV,GAAkB,EADtB,GAEKD,OAAO,GAAGK,cAAX,IACC,IAAIE,IAAI,CAACC,GAAL,CAAS,KAAK,IAAIH,cAAT,CAAT,EAAmCJ,KAAK,GAAG,EAA3C,CADL,CAHN;AAKA,MAAIQ,OAAO,GAAGT,OAAd;AACA,MAAIU,QAAQ,GAAGV,OAAf;AACA,MAAIW,QAAQ,GAAG,CAAC;AAAEC,IAAAA,WAAW,EAAE,CAAf;AAAkBH,IAAAA,OAAO,EAAPA,OAAlB;AAA2BC,IAAAA,QAAQ,EAARA;AAA3B,GAAD,CAAf;AACA,MAAIG,OAAJ;;AAVA,6BAYSC,IAZT;AAaE,QAAIC,cAAc,GAAG,CAArB;AACA,QAAIC,iBAAiB,GAAG,CAAxB;;AAdF,iCAeWC,KAfX;AAgBI,UAAML,WAAW,GAAGR,YAAY,CAC7Bc,MADiB,CACV,UAAAC,CAAC;AAAA,eAAI,CAACA,CAAC,CAACL,IAAH,KAAYA,IAAZ,IAAoB,CAACK,CAAC,CAACF,KAAH,KAAaA,KAArC;AAAA,OADS,EAEjBG,MAFiB,CAEV,UAACC,GAAD,EAAMC,GAAN;AAAA,eAAcD,GAAG,GAAG,CAACC,GAAG,CAACC,MAAzB;AAAA,OAFU,EAEuB,CAFvB,CAApB;AAGA,UAAIC,aAAa,GAAGf,OAAO,GAAGJ,cAA9B;AACAU,MAAAA,cAAc,IAAIS,aAAlB;AACAR,MAAAA,iBAAiB,IAAIJ,WAArB;AACAH,MAAAA,OAAO,IACLH,cAAc,GAAGH,kBAAjB,GAAsCS,WAAtC,GAAoDY,aADtD;AAEAd,MAAAA,QAAQ,IAAIJ,cAAc,GAAGI,QAAQ,GAAGL,cAAxC;;AAEA,UAAII,OAAO,IAAI,CAAf,EAAkB;AAChBA,QAAAA,OAAO,GAAG,CAAV;;AACA,YAAII,OAAO,KAAKY,SAAZ,IAAyBR,KAAK,KAAK,EAAvC,EAA2C;AACzCJ,UAAAA,OAAO,GAAGI,KAAV;AACD;AACF;AA/BL;;AAeE,SAAK,IAAIA,KAAK,GAAG,CAAjB,EAAoBA,KAAK,IAAI,EAA7B,EAAiCA,KAAK,EAAtC,EAA0C;AAAA,aAAjCA,KAAiC;AAiBzC;;AAEDN,IAAAA,QAAQ,CAACe,IAAT,CAAc;AACZhB,MAAAA,QAAQ,EAARA,QADY;AAEZK,MAAAA,cAAc,EAAdA,cAFY;AAGZN,MAAAA,OAAO,EAAPA,OAHY;AAIZI,MAAAA,OAAO,EAAPA,OAJY;AAKZD,MAAAA,WAAW,EAAEI,iBAAiB,GAAG,CAACb,kBAAD,IAAuBU,OAAO,IAAI,EAAlC;AALrB,KAAd;AAOA,QAAIA,OAAJ,EAAaA,OAAO,GAAG,CAAV;AAzCf;;AAYA,OAAK,IAAIC,IAAI,GAAG,CAAhB,EAAmBA,IAAI,GAAGb,KAA1B,EAAiCa,IAAI,EAArC,EAAyC;AAAA,UAAhCA,IAAgC;AA8BxC;;AACD,SAAO;AAAER,IAAAA,cAAc,EAAdA,cAAF;AAAkBK,IAAAA,QAAQ,EAARA;AAAlB,GAAP;AACD","sourcesContent":["export default function calculatePayments(\r\n  initial,\r\n  years,\r\n  rate,\r\n  monthlyOverpayment,\r\n  overpayments = []\r\n) {\r\n  const monthlyRatePct = rate / 1200;\r\n  const monthlyPayment =\r\n    monthlyRatePct === 0\r\n      ? initial / years / 12\r\n      : (initial * monthlyRatePct) /\r\n        (1 - Math.pow(1 / (1 + monthlyRatePct), years * 12));\r\n  let balance = initial;\r\n  let baseline = initial;\r\n  let payments = [{ overpayment: 0, balance, baseline }];\r\n  let partial;\r\n\r\n  for (let year = 0; year < years; year++) {\r\n    let interestYearly = 0;\r\n    let overpaymentYearly = 0;\r\n    for (let month = 1; month <= 12; month++) {\r\n      const overpayment = overpayments\r\n        .filter(x => +x.year === year && +x.month === month)\r\n        .reduce((acc, val) => acc + +val.amount, 0);\r\n      let interestMonth = balance * monthlyRatePct;\r\n      interestYearly += interestMonth;\r\n      overpaymentYearly += overpayment;\r\n      balance -=\r\n        monthlyPayment + monthlyOverpayment + overpayment - interestMonth;\r\n      baseline -= monthlyPayment - baseline * monthlyRatePct;\r\n\r\n      if (balance <= 0) {\r\n        balance = 0;\r\n        if (partial === undefined && month !== 12) {\r\n          partial = month;\r\n        }\r\n      }\r\n    }\r\n\r\n    payments.push({\r\n      baseline,\r\n      interestYearly,\r\n      balance,\r\n      partial,\r\n      overpayment: overpaymentYearly + +monthlyOverpayment * (partial || 12)\r\n    });\r\n    if (partial) partial = 0;\r\n  }\r\n  return { monthlyPayment, payments };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}